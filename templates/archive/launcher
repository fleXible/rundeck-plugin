#!/usr/bin/env bash
#
# launcher - Launch rerun from an self extracting archive script
#
# generator: @GENERATOR@
# date: @DATE@
# user: @USER@
# archive-version: @VERSION@
# archive-release: @RELEASE@

# Function to print error message and exit
die() { echo "ERROR: $* " >&2 ; exit 1 ; }

# Check for required environment variables 
[ -z "${CWD}" ] && die "CWD not set." ; # user's current working directory
[ -z "${PAYLOAD}" ] && die "PAYLOAD directory not specified." ; # archive artifacts 

# Verify the extracted artifact contents
[ -d ${PAYLOAD}/rerun ] || die "rerun subdirectory not found. CWD=${CWD}, PAYLOAD=$PAYLOAD"
[ -d ${PAYLOAD}/rerun/modules ] || die "missing modules subdirectory"
[ -f ${PAYLOAD}/rerun/rerun ] || die "missing rerun script"
[ -x ${PAYLOAD}/rerun/rerun ] || { chmod +x ./rerun || die "couldn't set rerun executable" ; }

# set the module directory base
export RERUN_MODULES=$PAYLOAD/rerun/modules


# add archive rerun script to path
PATH=$PATH:$PAYLOAD/rerun

# Marshalling config properties to command options
# -------------------------------------------------
# Generate a rerun answers file for any of the matching command step options.
# Remove the RD_CONFIG prefix from the variable name.
#
#      RD_CONFIG_MY_PROPNAME --translated--> MY_PROPNAME
#
# Note: assumes RD_* environment variables are passed through.

#env|grep '^RD_'|sort >/tmp/debug.context

ANSWERS=${PAYLOAD}/answers.$$

> $ANSWERS

env | 
while read envvar
do 
	varname=${envvar%%=*}
	[[ "${varname:-}" =~ ^RD_CONFIG.+ ]] || continue
	ANSWER_VARNAME=$(echo $varname |sed 's/^RD_CONFIG_//g' )

	VALUE=$(eval echo \$${varname})

	# Skip values if they contain an unresolved context variable.
	[[ "$VALUE" =~ \${(option|node|job)\..*} ]] && continue

	if [[ "${VALUE:-}" = *[[:space:]]* ]]
	then
		printf "%s=\"%s\"\n" "$ANSWER_VARNAME" "$VALUE" >> $ANSWERS
	else
		printf "%s=%s\n" "$ANSWER_VARNAME" "$VALUE" >> $ANSWERS		
	fi
done

#cp $ANSWERS /tmp/debug.answers

# launch it!

exec $PAYLOAD/rerun/rerun -G -A $ANSWERS "$@"

# Done
